// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  quizzes        Quiz[]        @relation("TeacherQuizzes")
  quizAttempts   QuizAttempt[] @relation("StudentAttempts")

  @@map("users")
}

model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String
  subject     String
  timeLimit   Int?     // in minutes
  totalPoints Int      @default(0)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teacherId   String
  teacher     User         @relation("TeacherQuizzes", fields: [teacherId], references: [id], onDelete: Cascade)
  questions   Question[]
  attempts    QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id            String   @id @default(cuid())
  text          String
  type          QuestionType
  options       String[] // JSON array for multiple choice options
  correctAnswer String   // JSON string for single or multiple answers
  points        Int      @default(1)
  order         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers QuizAnswer[]

  @@map("questions")
}

model QuizAttempt {
  id          String   @id @default(cuid())
  score       Int      @default(0)
  totalPoints Int      @default(0)
  timeSpent   Int      @default(0) // in seconds
  completedAt DateTime?
  createdAt   DateTime @default(now())

  // Relations
  quizId   String
  quiz     Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  studentId String
  student   User   @relation("StudentAttempts", fields: [studentId], references: [id], onDelete: Cascade)
  answers   QuizAnswer[]

  @@map("quiz_attempts")
}

model QuizAnswer {
  id           String @id @default(cuid())
  answer       String // JSON string for single or multiple answers
  isCorrect    Boolean @default(false)
  pointsEarned Int    @default(0)

  // Relations
  attemptId  String
  attempt    QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("quiz_answers")
}

enum UserRole {
  STUDENT
  TEACHER
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
} 